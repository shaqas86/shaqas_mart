# version: '3.8'
name: shaqas_ai_mart
services:
  #########PRODUCT SERVICE################## 
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_product_db
        - broker
    ports:
      - "8010:8000"  # Expose container port 8000 to host port 8010  
  ########INVENTORY SERVICE#################
  # inventory-service:
  #   build:
  #     context: ./inventory-service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./inventory-service:/code  # Sync local development directory with the container
  #   depends_on:
  #       - postgres_inventory_db
  #       - broker
  #   ports:
  #     - "8011:8000"  # Expose container port 8000 to host port 8011 
  ########ORDER SERVICE#################
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order-service:/code  # Sync local development directory with the container
    depends_on:
        - postgres_order_db
        - broker
    ports:
      - "8012:8000"  # Expose container port 8000 to host port 8012 
  ########NOTIFICATION SERVICE#################
  # notification-service:
  #   build:
  #     context: ./notification-service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./notification-service:/code  # Sync local development directory with the container
  #   depends_on:
  #       - postgres_notification_db
  #       - broker
  #   ports:
  #     - "8013:8000"  # Expose container port 8000 to host port 8013
  ########PAYMENT SERVICE#################
  # payment-service:
  #   build:
  #     context: ./payment-service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./payment-service:/code  # Sync local development directory with the container
  #   depends_on:
  #       - postgres_payment_db
  #       - broker
  #   ports:
  #     - "8014:8000"  # Expose container port 8000 to host port 8014
 ########USER SERVICE#################
  # user-service:
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./user-service:/code  # Sync local development directory with the container
  #   depends_on:
  #       - postgres_user_db
  #       - broker
  #   ports:
  #     - "8015:8000"  # Expose container port 8000 to host port 8015
 ############PRODUCT DB################
  postgres_product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresProductCont
    environment:
        - POSTGRES_USER=shaqas
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5481:5432'
    volumes:
        - postgres_product_db:/var/lib/postgresql/data
############INVENTORY DB################
  # postgres_inventory_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: PostgresInventoryCont
  #   environment:
  #       - POSTGRES_USER=shaqas
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=mydatabase
  #   ports:
  #       - '5482:5432'
  #   volumes:
  #       - postgres_inventory_db:/var/lib/postgresql/data
############ORDER DB################
  postgres_order_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresOrderCont
    environment:
        - POSTGRES_USER=shaqas
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5483:5432'
    volumes:
        - postgres_order_db:/var/lib/postgresql/data
############NOTIFICATION DB################
  # postgres_notification_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: PostgresNotificationCont
  #   environment:
  #       - POSTGRES_USER=shaqas
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=mydatabase
  #   ports:
  #       - '5484:5432'
  #   volumes:
  #       - postgres_notification_db:/var/lib/postgresql/data
############PAYMENT DB################
  # postgres_payment_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: PostgresPaymentCont
  #   environment:
  #       - POSTGRES_USER=shaqas
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=mydatabase
  #   ports:
  #       - '5485:5432'
  #   volumes:
  #       - postgres_payment_db:/var/lib/postgresql/data
############USER DB################
  # postgres_user_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: PostgresUserCont
  #   environment:
  #       - POSTGRES_USER=shaqas
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=mydatabase
  #   ports:
  #       - '5486:5432'
  #   volumes:
  #       - postgres_user_db:/var/lib/postgresql/data
############KAFKA BROKER################
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
############KAFKA UI################
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
###########VOLUMES#################
volumes:
  postgres_product_db:
    driver: local
  postgres_inventory_db:
    driver: local
  postgres_order_db:
    driver: local
  # postgres_notification_db:
  #   driver: local
  # postgres_payment_db:
  #   driver: local
  # postgres_user_db:
  #   driver: local
###########NETWORKS#################
networks:
  default:
    driver: bridge
